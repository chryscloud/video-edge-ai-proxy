# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import video_streaming_pb2 as video__streaming__pb2


class ImageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VideoLatestImage = channel.stream_stream(
                '/chrys.cloud.videostreaming.v1beta1.Image/VideoLatestImage',
                request_serializer=video__streaming__pb2.VideoFrameRequest.SerializeToString,
                response_deserializer=video__streaming__pb2.VideoFrame.FromString,
                )
        self.ListStreams = channel.unary_stream(
                '/chrys.cloud.videostreaming.v1beta1.Image/ListStreams',
                request_serializer=video__streaming__pb2.ListStreamRequest.SerializeToString,
                response_deserializer=video__streaming__pb2.ListStream.FromString,
                )
        self.StartProxy = channel.unary_unary(
                '/chrys.cloud.videostreaming.v1beta1.Image/StartProxy',
                request_serializer=video__streaming__pb2.StartProxyRequest.SerializeToString,
                response_deserializer=video__streaming__pb2.ProxyResponse.FromString,
                )
        self.StopProxy = channel.unary_unary(
                '/chrys.cloud.videostreaming.v1beta1.Image/StopProxy',
                request_serializer=video__streaming__pb2.StopProxyRequest.SerializeToString,
                response_deserializer=video__streaming__pb2.ProxyResponse.FromString,
                )


class ImageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VideoLatestImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStreams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartProxy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopProxy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VideoLatestImage': grpc.stream_stream_rpc_method_handler(
                    servicer.VideoLatestImage,
                    request_deserializer=video__streaming__pb2.VideoFrameRequest.FromString,
                    response_serializer=video__streaming__pb2.VideoFrame.SerializeToString,
            ),
            'ListStreams': grpc.unary_stream_rpc_method_handler(
                    servicer.ListStreams,
                    request_deserializer=video__streaming__pb2.ListStreamRequest.FromString,
                    response_serializer=video__streaming__pb2.ListStream.SerializeToString,
            ),
            'StartProxy': grpc.unary_unary_rpc_method_handler(
                    servicer.StartProxy,
                    request_deserializer=video__streaming__pb2.StartProxyRequest.FromString,
                    response_serializer=video__streaming__pb2.ProxyResponse.SerializeToString,
            ),
            'StopProxy': grpc.unary_unary_rpc_method_handler(
                    servicer.StopProxy,
                    request_deserializer=video__streaming__pb2.StopProxyRequest.FromString,
                    response_serializer=video__streaming__pb2.ProxyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chrys.cloud.videostreaming.v1beta1.Image', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Image(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VideoLatestImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/chrys.cloud.videostreaming.v1beta1.Image/VideoLatestImage',
            video__streaming__pb2.VideoFrameRequest.SerializeToString,
            video__streaming__pb2.VideoFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStreams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chrys.cloud.videostreaming.v1beta1.Image/ListStreams',
            video__streaming__pb2.ListStreamRequest.SerializeToString,
            video__streaming__pb2.ListStream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartProxy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chrys.cloud.videostreaming.v1beta1.Image/StartProxy',
            video__streaming__pb2.StartProxyRequest.SerializeToString,
            video__streaming__pb2.ProxyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopProxy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chrys.cloud.videostreaming.v1beta1.Image/StopProxy',
            video__streaming__pb2.StopProxyRequest.SerializeToString,
            video__streaming__pb2.ProxyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
